import type { Generated, ColumnType } from 'kysely';
import { createKysely } from '@vercel/postgres-kysely';

interface UserTable {
  // Columns that are generated by the database should be marked
  // using the `Generated` type. This way they are automatically
  // made optional in inserts and updates.
  id: Generated<number>;
  name: string;
  email: string;
  image: string;

  // You can specify a different type for each operation (select, insert and
  // update) using the `ColumnType<SelectType, InsertType, UpdateType>`
  // wrapper. Here we define a column `modified_at` that is selected as
  // a `Date`, can optionally be provided as a `string` in inserts and
  // can never be updated:
  createdAt: ColumnType<Date, string | undefined, never>;
}

// Keys of this interface are table names.
export interface Database {
  users: UserTable;
}
export const db = createKysely<Database>();

export const queryUsers = async (): Promise<
  {
    id: number;
    name: string;
    email: string;
    image: string;
    createdAt: Date;
  }[]
> => {
  const timeoutPromise = new Promise<never>((_, reject) =>
    // eslint-disable-next-line no-promise-executor-return -- [@vercel/style-guide@5 migration]
    setTimeout(() => {
      reject(new Error('SELECT hung for more than 20 seconds'));
    }, 20000),
  );
  const usersPromise = db.selectFrom('users').selectAll().execute();
  return Promise.race([timeoutPromise, usersPromise]);
};
